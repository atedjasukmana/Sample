using System;
using System.Data;
using System.Configuration;
using System.Collections;
using System.Web;
using System.Web.Security;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.WebControls.WebParts;
using System.Web.UI.HtmlControls;
using CPOMemberWeb.Common;
using System.Data.SqlClient;
using System.Xml;
using System.Text;
using System.Drawing;
using CPO_MidTier2;
using CPOMemberWeb.Common.Logger;


namespace CMRTO.PublicRegister.MemberServices.Secure
{
    
    public partial class RosterNew : System.Web.UI.Page
    {
            

        protected void Page_Load(object sender, EventArgs e)
        {
            //Check whether user already login
            //if not login send it to login page
            if ((String)Session["LOGGED_IN"] != "OK")
            {
                Response.Redirect("../Login.aspx");

            }

            if (!IsPostBack)
            {

                string sContactId = string.Empty;
                if (Request.Cookies["hpContactId"] != null)
                {
                    HttpCookie hc = Request.Cookies["hpContactId"];
                    sContactId = Server.HtmlEncode(hc.Value);
                }
                else
                {
                    writeEventToLog(" Missing Contact Id");
                    Response.Redirect("../Login.aspx", false);
                    return;
                }

                ViewState.Add("vContactId", sContactId);

                

                
            }

            PopulateForm();
 
        }

        //Purpose: To populate form
        //Programmer: Andreas Tedjasukmana
        //Date: December, 2011
        private void PopulateForm()
        {
            try
            {
                this.btnModal1Yes.Click += new EventHandler(btnModal1Yes_Click);
                this.btnModal1No.Click += new EventHandler(btnModal1No_Click);
                this.btnModal2Yes.Click += new EventHandler(btnModal2Yes_Click);
                this.btnModal2No.Click += new EventHandler(btnModal2No_Click);
                this.btnModal3Yes.Click += new EventHandler(btnModal3Yes_Click);
                this.btnModal3No.Click += new EventHandler(btnModal3No_Click);

                Master.HelpButton.Attributes.Add("onClick", "window.open(\'" + "http://www.collegept.org/Physiotherapists/EP/CurrentRegistrants" + "\')");
                Master.HelpButton.Enabled = true;

                string sParam = string.Empty, sParam2 = string.Empty;
                string sRecordId = string.Empty;
                string sContactId = string.Empty;
                string sIndex = "0";
                ArrayList al;

                SetModalPopup1();
                SetModalPopup2();
                SetModalPopup3();

                Btn_Save.Visible = false;
                Btn_Save.Enabled = false;
                Btn_Cancel.Visible = false;
                Btn_Cancel.Enabled = false;

                Master.HelpButton.Enabled = true;
                Master.PreviousStepButton.Enabled = true;
                Master.NextStepButton.Enabled = true;

                Master.PreviousStepButton.Click += new ImageClickEventHandler(OnPreviousStepClick);
                Master.NextStepButton.Click += new ImageClickEventHandler(OnNextStepClick);

                    
                RosterUtil ru = new RosterUtil();
                sContactId = (string)ViewState["vContactId"];
                sRecordId = (string)ViewState["vRosterId"];

                if (ViewState["vCurrentIndex"] == null)
                {
                   ViewState.Add("vCurrentIndex", 0);
                }
                  
                                    
                    if (!IsPostBack)
                    {
                                               
                        if (Request.QueryString["p2"] == "1")
                        {
                            ViewState.Add("vAddRenew", true);
                            ru.PopAuthorizedActivity("Add", sContactId, sRecordId, this.RB_Authorized_Activity);
                            ru.PopCountry(this.DDL_Country);
                            ru.PopYearTrainComplete(this.DDL_Year_Train_Complete);

                            al = ru.Create_Roster_ArrayList(sContactId);
                            ViewState.Add("vRosterList", al);
                            ResetFieldColor();

                            
                             
                           
                        }
                        else
                        {
                            //Updating existing record for renewal
                            if (Request.QueryString["p3"] == "1") //If getting request to iterate from the last record
                            {
                                ViewState.Add("vAddRenew", false);
                                al = ru.Create_Roster_ArrayList(sContactId);
                                ViewState.Add("vRosterList", al);

                                sRecordId = GetLastRecordId();

                                    if (string.IsNullOrEmpty(sRecordId) == true)
                                    {
                                        Response.Redirect("Roster.aspx", false);

                                        //Date: March 14, 2012
                                        //Program programmer: Andreas Tedjasukmana
                                        //return is added to solve issue with program not exiting properly
                                        return;

                                    }
                                    else
                                    {
                                        ViewState.Add("vRosterId", sRecordId);
                                        
                                    }
                               

                                ru.PopAuthorizedActivity("Update", sContactId, sRecordId, this.RB_Authorized_Activity);
                                 ru.PopCountry(this.DDL_Country);
                                 ru.PopYearTrainComplete(this.DDL_Year_Train_Complete);


                                ResetFieldColor();

                                PopFieldsFromDb(sRecordId);
                                CB_Remove.Visible = true;
                            }
                            else
                            {// if requested to iterate from beginning of record
                                ViewState.Add("vAddRenew", false);
                                al = ru.Create_Roster_ArrayList(sContactId);
                                ViewState.Add("vRosterList", al);

                                sRecordId = GetFirstRecordId();
                                ViewState.Add("vRosterId", sRecordId);
                                ru.PopAuthorizedActivity("Update", sContactId, sRecordId, this.RB_Authorized_Activity);
                                ru.PopCountry(this.DDL_Country);
                                ru.PopYearTrainComplete(this.DDL_Year_Train_Complete);
                                
                                ResetFieldColor();

                                PopFieldsFromDb(sRecordId);
                                CB_Remove.Visible = true;
                            }
                        }

                        ru.Create_Roster_List_Renew(sContactId, this.PRoster);

                    }
                    else
                    {
                        ru.Create_Roster_List_Renew(sContactId, this.PRoster);
                    }

                    
                                         
            }

            catch (Exception exc)
            {
                string msg;
                msg = exc.Message;

                writeEventToLog(" Error to populate form ! -- " + msg);
            }
        }

        
        //Purpose: to fill fields in form with value from database
        //Programmer: Andreas Tedjasukmana
        //Date: December, 2011
        private void PopFieldsFromDb(string sRosterId)
        {
            SqlConnection sconn = null;
            DataSet ds = null;

            try
            {
                DbRecord dbr = new DbRecord();
                DataTable t;
                DataRow r;
                
                
                sconn = dbr.GetConnection();
                ds = dbr.GetTableText("Select CPO_Authorized_Activity_Id, CPO_Year_Train_Complete, CPO_Education, CPO_Theoretical_Edu, CPO_Practical_Edu, CPO_Assessments, CPO_Country from CPO_Roster where CPO_Roster_Id =" + sRosterId, sconn);

                t = ds.Tables[0];

                if (ds != null)
                {    r = t.Rows[0];
                    if (t.Rows.Count > 0)
                    {
                        byte[] btValue = new byte[8];
                        btValue = (byte[]) r[0];
                        string strValue = dbr.Convert_Relationship_Id(btValue);

                        this.RB_Authorized_Activity.SelectedValue = strValue;
                        //this.DDL_Year_Train_Complete.SelectedItem.Text = r[1].ToString();
                        this.DDL_Year_Train_Complete.SelectedValue = r[1].ToString();
                        this.Txt_Education.Text = r[2].ToString();
                        this.Txt_Theoretical_Edu.Text = r[3].ToString();
                        this.Txt_Practical_Edu.Text = r[4].ToString();
                        this.Txt_Assessments.Text = r[5].ToString();
                        this.DDL_Country.SelectedItem.Text = r[6].ToString();
                        this.CB_Performed.Checked = false;
                        this.CB_Agree.Checked = false;
                        this.CB_Remove.Checked = false;

                    }
                }

                //ds = null;
                //sconn.Close();
                //sconn.Dispose();
            }
            catch (Exception exc)
            {
                string msg;
                msg = exc.Message;
                writeEventToLog(" Error to populate fields from database ! -- " + msg);
            }
            finally
            {
                ds = null;
                if (sconn != null)
                {
                    ((IDisposable)sconn).Dispose();
                }
            }
        }

        //Purpose: reset field color to ensure that warning color are removed
        //Programmer: Andreas Tedjasukmana
        //Date: December, 2011
        private void ResetFieldColor()
        {
            try
            {

                    Lbl_Authorized_Activity.BorderColor = Color.Empty;
                    Lbl_Year_Train_Complete.BorderColor = Color.Empty;
                    Lbl_Education.BorderColor = Color.Empty;
                    Lbl_Theoretical_Edu.BorderColor = Color.Empty;
                    Lbl_Practical_Edu.BorderColor = Color.Empty;
                    Lbl_Assessments.BorderColor = Color.Empty;
                    Lbl_Country.BorderColor = Color.Empty;
                    CB_Performed.BorderColor = Color.Empty;
                    CB_Agree.BorderColor = Color.Empty;


                    Lbl_Authorized_Activity.BorderStyle = BorderStyle.None;
                    Lbl_Year_Train_Complete.BorderStyle = BorderStyle.None;
                    Lbl_Education.BorderStyle = BorderStyle.None;
                    Lbl_Theoretical_Edu.BorderStyle = BorderStyle.None;
                    Lbl_Practical_Edu.BorderStyle = BorderStyle.None;
                    Lbl_Assessments.BorderStyle = BorderStyle.None;
                    Lbl_Country.BorderStyle = BorderStyle.None;
                    CB_Performed.BorderStyle = BorderStyle.None;
                    CB_Agree.BorderStyle = BorderStyle.None;

            }

            catch (Exception exc)
            {
                string msg;
                msg = exc.Message;
                writeEventToLog(" Error to reset fields color ! -- " + msg);
            }

        }

        //Purpose: test field have been filled, if not a warning color is applied
        //Programmer: Andreas Tedjasukmana
        //Date: December, 2011
        private bool TestMandatoryFields()
        {try
        {
            int iResult = 0;
            bool bResult = true;

            if (this.CB_Remove.Checked == false)
            {
                if (this.RB_Authorized_Activity.SelectedIndex == -1)
                {
                    Lbl_Authorized_Activity.BorderColor = Color.Red;
                    Lbl_Authorized_Activity.BorderStyle = BorderStyle.Dashed;
                                        
                    iResult = iResult + 1;
                 }

                 if (this.DDL_Year_Train_Complete.Text.Length < 1)
                 {
                     Lbl_Year_Train_Complete.BorderColor = Color.Red;
                     Lbl_Year_Train_Complete.BorderStyle = BorderStyle.Dashed;
                     iResult = iResult + 1;
                 }

                 if (this.Txt_Education.Text.Length < 1)
                 {
                     Lbl_Education.BorderColor = Color.Red;
                     Lbl_Education.BorderStyle = BorderStyle.Dashed;
                     iResult = iResult + 1;
                 }

                 if (this.Txt_Theoretical_Edu.Text.Length < 1)
                 {
                     Lbl_Theoretical_Edu.BorderColor = Color.Red;
                     Lbl_Theoretical_Edu.BorderStyle = BorderStyle.Dashed;
                     iResult = iResult + 1;
                 }

                 if (this.Txt_Practical_Edu.Text.Length < 1)
                 {
                     Lbl_Practical_Edu.BorderColor = Color.Red;
                     Lbl_Practical_Edu.BorderStyle = BorderStyle.Dashed;
                     iResult = iResult + 1;
                 }

                 if (this.Txt_Assessments.Text.Length < 1)
                 {
                     Lbl_Assessments.BorderColor = Color.Red;
                     Lbl_Assessments.BorderStyle = BorderStyle.Dashed;
                     iResult = iResult + 1;
                 }

                 if (this.DDL_Country.SelectedItem.Text.Length < 1)
                 {
                     Lbl_Country.BorderColor = Color.Red;
                     Lbl_Country.BorderStyle = BorderStyle.Dashed;
                     iResult = iResult + 1;
                 }

                 
                     if (this.CB_Performed.Checked == false)
                     {
                         CB_Performed.BorderColor = Color.Red;
                         CB_Performed.BorderStyle = BorderStyle.Dashed;
                         iResult = iResult + 1;

                     }

                     if (this.CB_Agree.Checked == false)
                     {
                         CB_Agree.BorderColor = Color.Red;
                         CB_Agree.BorderStyle = BorderStyle.Dashed;
                         iResult = iResult + 1;
                     }
                 }


                 if (iResult > 0)
                 {
                     bResult = false;
                 }
                 
                
                 return bResult;


            }

            catch (Exception exc)
            {
                string msg;
                msg = exc.Message;
                writeEventToLog(" Error to test mandatory fields ! -- " + msg);
                return false;
            }
        }

        

        //Purpose: to prompt user to choose OK or Cancel
        //Programmer: Andreas Tedjasukmana
        //Date: December, 2011
        private void JavaConfirm(string sMsg)
        {try
            {
                
            string script;
            script = "<SCRIPT LANGUAGE='JavaScript'>";
            script += "var choice=confirm('" + sMsg + "');";
            script += "if(choice)window.location='Roster.aspx';"; //renewal roster
            script += "</SCRIPT>";
            ClientScript.RegisterStartupScript(this.GetType(), "PopupScript", script);
            }

        catch (Exception exc)
        {
            string msg;
            msg = exc.Message;
            writeEventToLog(" Error in java confirm ! -- " + msg);
        }
        }

        //Purpose: Prompt user to add record or not
        //Programmer: Andreas Tedjasukmana
        //Date: December, 2011
        private void JavaConfirmAddRecord(string sMsg)
        {
            try
            {
                string script;
                script = "<SCRIPT LANGUAGE='JavaScript'>";
                script += "var choice=confirm('" + sMsg + "');";
                script += "if(choice){window.location='RosterNew.aspx?p2=1';} else {window.location='RenewalSummary.aspx';}";
                script += "</SCRIPT>";
                ClientScript.RegisterStartupScript(this.GetType(), "PopupScript", script);
            }

            catch (Exception exc)
            {
                string msg;
                msg = exc.Message;
                writeEventToLog(" Error java confirm add ! -- " + msg);
            }
        }


        //Purpose: To get first record id that has been store in the array
        //Programmer: Andreas Tedjasukmana
        //Date: December, 2011
        private string GetFirstRecordId()
        {try
            {

             ArrayList al = (ArrayList)ViewState["vRosterList"];
                

            string sRecordId = string.Empty;
            sRecordId = al[0].ToString();
            ViewState.Add("vCurrentIndex", 0);
            

            return sRecordId;
            }

        catch (Exception exc)
        {
            string msg;
            msg = exc.Message;
            writeEventToLog(" Error to get first record id ! -- " + msg);
            return string.Empty;
        }
        }

        //Purpose: To get last record id that has been store in the array
        //Programmer: Andreas Tedjasukmana
        //Date: December, 2011
        private string GetLastRecordId()
        {
            try
            {

                ArrayList al = (ArrayList)ViewState["vRosterList"];
                    
                int iCount = al.Count;

                string sRecordId = string.Empty;

                if (iCount > 0)
                {
                    sRecordId = al[iCount - 1].ToString();
                    
                    ViewState.Add("vCurrentIndex", iCount - 1);
                }

                return sRecordId;
            }

            catch (Exception exc)
            {
                string msg;
                msg = exc.Message;
                writeEventToLog(" Error to get last record id ! -- " + msg);
                return string.Empty;
            }
        }

        //Purpose: to get index number of a record that has been stored in an array
        //Programmer: Andreas Tedjasukmana
        //Date: December, 2011
        private int GetRecordIndex(string sRecordId)
        {
            try
            {
                ArrayList al = (ArrayList)ViewState["vRosterList"];
                int iIndex = al.BinarySearch(sRecordId);
                
                return iIndex;
            }

        catch (Exception exc)
        {
            string msg;
            msg = exc.Message;
            writeEventToLog(" Error to get record index ! -- " + msg);
            return 0;
        }
        }

        //Purpose: to get last index number of a record that has been stored in an array
        //Programmer: Andreas Tedjasukmana
        //Date: December, 2011
        private int GetLastIndex()
        {
            try
            {
                ArrayList al = (ArrayList)ViewState["vRosterList"];
                int iIndex = al.Count - 1;

                return iIndex;
            }

            catch (Exception exc)
            {
                string msg;
                msg = exc.Message;
                writeEventToLog(" Error to get record index ! -- " + msg);
                return 0;
            }
        }

        //Purpose: to get the record id of a given index number in an array
        //Programmer: Andreas Tedjasukmana
        //Date: December, 2011
        private string GetRecordId(int iIndex)
        {
            try
            {

                ArrayList al = (ArrayList)ViewState["vRosterList"];
                string sRecordId = string.Empty;
                sRecordId = al[iIndex].ToString();

                return sRecordId;
            }

            catch (Exception exc)
            {
                string msg;
                msg = exc.Message;
                writeEventToLog(" Error to get record id ! -- " + msg);
                return string.Empty;
            }
        }

        //Purpose: to get the last index number of record in an array
        //Programmer: Andreas Tedjasukmana
        //Date: December, 2011
        private bool IsLastRecordIndex(string sRecordId)
        {try
            {   bool bResult = false;

            ArrayList al = (ArrayList)ViewState["vRosterList"];
               
                int iIndex = al.BinarySearch(sRecordId);
                int iCount = al.Count;
                int iCurrent = GetRecordIndex(sRecordId);

                if(iCurrent == (iCount-1))
                { bResult = true;
                }
                
            return bResult;
              
             }

        catch (Exception exc)
        {
            string msg;
            msg = exc.Message;
            writeEventToLog(" Error in Islastrecordindex ! -- " + msg);
            return false;
        }

        }

        //Purpose: to determine the record of a given index number is the last in the array
        //Programmer: Andreas Tedjasukmana
        //Date: December, 2011
        private bool IsLastRecordIndex(int iIndex)
        {
            try
            {
                
                bool bResult = false;
                ArrayList al = (ArrayList)ViewState["vRosterList"];
                int iCount = al.Count;
                
                if (iIndex == (iCount - 1))
                {
                    bResult = true;
                }

                return bResult;

            }

            catch (Exception exc)
            {
                string msg;
                msg = exc.Message;
                writeEventToLog(" Error in Islastrecordindex ! -- " + msg);
                return false;
            }

        }

        //Purpose: to determine the record is the first in the array
        //Programmer: Andreas Tedjasukmana
        //Date: December, 2011
        private bool IsFirstRecordIndex(string sRecordId)
        {
            try
            {
                 bool bResult = false;
                 ArrayList al = (ArrayList)ViewState["vRosterList"];
                int iCurrent = GetRecordIndex(sRecordId);

                if(iCurrent == 0)
                { bResult = true;
                }
                
            return bResult;
             }

        catch (Exception exc)
        {
            string msg;
            msg = exc.Message;
            writeEventToLog(" Error in Isfirstrecordindex ! -- " + msg);
            return false;
        }
        }

        //Purpose: to determine the record of a given index number is the last in the array
        //Programmer: Andreas Tedjasukmana
        //Date: December, 2011
        private bool IsFirstRecordIndex(int iIndex)
        {
            try
            {
                bool bResult = false;

                if (iIndex == 0)
                {
                    bResult = true;
                }

                return bResult;
            }

            catch (Exception exc)
            {
                string msg;
                msg = exc.Message;
                writeEventToLog(" Error in Isfirstrecordindex ! -- " + msg);

                return false;
            }
        }

        //Purpose: Event when next step button is clicked
        //Programmer: Andreas Tedjasukmana
        //Date: December, 2011
        private void OnNextStepClick(object sender, EventArgs e)
        {
             try
             {
                 RosterUtil ru = new RosterUtil();
                 ArrayList al = (ArrayList) ViewState["vRosterList"];
                 string sContactId = (string) ViewState["vContactId"];
                 int iCurrentIndex;
                 string sRecordId;
                 bool bSave = false;

                
                 //Preparing fields to be saved
                 string SYearTrain = string.Empty;
                 string SEducation = string.Empty;
                 string STheoretical = string.Empty;
                 string SPractical = string.Empty;
                 string SAssesments = string.Empty;
                 string SCountry = string.Empty;
                 string SPerformed = string.Empty;
                 string SAgree = string.Empty;
                 string SAA = string.Empty;

                               
                 iCurrentIndex = (int)ViewState["vCurrentIndex"];

                 bool BStatus = false;

                 //if remove is selected
                 if (CB_Remove.Checked == true)
                 {
                     BStatus = true;

                     SYearTrain = this.DDL_Year_Train_Complete.SelectedItem.Text;
                     SEducation = this.Txt_Education.Text;
                     STheoretical = this.Txt_Theoretical_Edu.Text;
                     SPractical = this.Txt_Practical_Edu.Text;
                     SAssesments = this.Txt_Assessments.Text;
                     SCountry = this.DDL_Country.SelectedItem.Text;
                     SPerformed = "1";
                     SAgree = "1";
                     SAA = this.RB_Authorized_Activity.SelectedItem.Value.Substring(2);

                     sRecordId = GetRecordId(iCurrentIndex);
                     bSave = ru.UpdateRoster(sRecordId, sContactId, SYearTrain, SEducation, STheoretical, SPractical, SAssesments, SCountry, SPerformed, SAgree, SAA, BStatus);

                     if (bSave == true)
                     {//after saving need to populate screen with new record
                         if (IsLastRecordIndex(iCurrentIndex) == true) //Testing if already reaching the last record
                         {
                             OpenPopUpBox("PopupBox2"); 
                             return;
                         }
                         else
                         {

                             //iCurrentIndex = iCurrentIndex - 1; //set index lower
                             ViewState.Add("vCurrentIndex", iCurrentIndex); //save the index
                             al = ru.Create_Roster_ArrayList(sContactId); //create new index table
                             ViewState.Add("vRosterList", al); //save the index table

                             sRecordId = GetRecordId(iCurrentIndex); //get the record id
                             ViewState.Add("vRosterId", sRecordId); //save the record id

                             //populate the form
                             ru.Create_Roster_List_Renew(sContactId, this.PRoster); //create the roster list
                             ru.PopAuthorizedActivity("Update", sContactId, sRecordId, this.RB_Authorized_Activity);
                             ru.PopCountry(this.DDL_Country);
                             ru.PopYearTrainComplete(this.DDL_Year_Train_Complete);
                             ResetFieldColor();
                             PopFieldsFromDb(sRecordId);
                             return;
                         }
                     }
                     else
                     {
                         Response.Redirect("Roster.aspx", false);
                         return;
                     }
                 }
                 else
                 {
                     BStatus = false;
                 }


                 
                 bool bTest = TestMandatoryFields();

                 if (bTest == false)
                 {
                     OpenPopUpBox("PopupBox1");
                     
                     return;
                 }

                 

                 SYearTrain = this.DDL_Year_Train_Complete.SelectedItem.Text;
                 SEducation = this.Txt_Education.Text;
                 STheoretical = this.Txt_Theoretical_Edu.Text;
                 SPractical = this.Txt_Practical_Edu.Text;
                 SAssesments = this.Txt_Assessments.Text;
                 SCountry = this.DDL_Country.SelectedItem.Text;
                 SPerformed = Convert.ToInt16(this.CB_Performed.Checked).ToString();
                 SAgree = Convert.ToInt16(this.CB_Agree.Checked).ToString();
                 SAA = this.RB_Authorized_Activity.SelectedItem.Value.Substring(2);
                
                bool bStatus = (bool)ViewState["vAddRenew"];

                if (bStatus == true) //testing whether this is for adding new record during renewal process
                {
                    if (bTest == true) //If mandatory fields already populated
                    {
                        bSave = ru.AddNewRoster(sContactId, SYearTrain, SEducation, STheoretical, SPractical, SAssesments, SCountry, SPerformed, SAgree, SAA);

                        if (bSave == true)
                        {
                            ViewState.Add("vAddRenew", false);

                            iCurrentIndex = iCurrentIndex + 1;
                            ViewState.Add("vCurrentIndex", iCurrentIndex);

                            OpenPopUpBox("PopupBox2");
                        }
                        else
                        {
                            
                            ViewState.Add("vAddRenew", false);
                            ViewState.Add("vCurrentIndex", 0);
                            ViewState.Add("vRecordId", "");
                            Response.Redirect("Roster.aspx",false);
                        }
                    }
                    else
                    {

                        OpenPopUpBox("PopupBox1");
                        
                       
                    }
                }
                else
                {
                    

                    if (IsLastRecordIndex(iCurrentIndex) == false) //Testing if already reaching the last record
                    {

                        if (bTest == true) //If mandatory fields already populated
                        {
                            sRecordId = GetRecordId(iCurrentIndex);
                            bSave = ru.UpdateRoster(sRecordId, sContactId, SYearTrain, SEducation, STheoretical, SPractical, SAssesments, SCountry, SPerformed, SAgree, SAA, BStatus);


                            if (bSave == true)
                            {
                                if (CB_Remove.Checked == true)
                                {
                                    al = ru.Create_Roster_ArrayList(sContactId);
                                    ViewState.Add("vRosterList", al);
                                   
                                }
                                else
                                {
                                    iCurrentIndex = iCurrentIndex + 1;
                                }
                                
                               
                                ViewState.Add("vCurrentIndex", iCurrentIndex);
                                sRecordId = GetRecordId(iCurrentIndex);
                                ViewState.Add("vRosterId", sRecordId);
                                ru.Create_Roster_List_Renew(sContactId,this.PRoster);
                                
                                ru.PopAuthorizedActivity("Update", sContactId, sRecordId, this.RB_Authorized_Activity);
                                ru.PopCountry(this.DDL_Country);
                                ru.PopYearTrainComplete(this.DDL_Year_Train_Complete);

                                ResetFieldColor();
                                PopFieldsFromDb(sRecordId);
                            }

                        }
                        else
                        {

                            OpenPopUpBox("PopupBox1");
                           
                        }


                    }
                    else
                    {   //If record is the last of record

                        if (bTest == true) //If mandatory fields already populated
                        {
                            sRecordId = GetRecordId(iCurrentIndex);

                            bSave = ru.UpdateRoster(sRecordId, sContactId, SYearTrain, SEducation, STheoretical, SPractical, SAssesments, SCountry, SPerformed, SAgree, SAA, BStatus);
                            if (bSave == true)
                            {
                                iCurrentIndex = iCurrentIndex + 1;
                                ViewState.Add("vCurrentIndex", iCurrentIndex);
                                OpenPopUpBox("PopupBox2");
                               
                            }
                        }
                        else
                        {


                            OpenPopUpBox("PopupBox1");
                            
                        }

                    }
                }

                
                    
            }
                                
           

        catch (Exception exc)
        {
            string msg;
            msg = exc.Message;
            writeEventToLog(" Error in On Next Step ! -- " + msg);
        }
        }

        //Purpose: Event when previous step button is clicked
        //Programmer: Andreas Tedjasukmana
        //Date: December, 2011
        private void OnPreviousStepClick(object sender, EventArgs e)
        {
            try
            {
                RosterUtil ru = new RosterUtil();
                ArrayList al = (ArrayList) ViewState["vRosterList"];
                string sContactId = (string) ViewState["vContactId"];
                int iCurrentIndex;
                string sRecordId;

                
                //Preparing fields to be saved
                string SYearTrain = string.Empty;
                string SEducation = string.Empty;
                string STheoretical = string.Empty;
                string SPractical = string.Empty;
                string SAssesments = string.Empty;
                string SCountry = string.Empty;
                string SPerformed = string.Empty;
                string SAgree = string.Empty;
                string SAA = string.Empty;

                iCurrentIndex = (int)ViewState["vCurrentIndex"];

                bool BStatus = false;
                bool bSave = false;

                               
                if (CB_Remove.Checked == true)
                {
                    BStatus = true;

                    SYearTrain = this.DDL_Year_Train_Complete.SelectedItem.Text;
                    SEducation = this.Txt_Education.Text;
                    STheoretical = this.Txt_Theoretical_Edu.Text;
                    SPractical = this.Txt_Practical_Edu.Text;
                    SAssesments = this.Txt_Assessments.Text;
                    SCountry = this.DDL_Country.SelectedItem.Text;
                    SPerformed = "1";
                    SAgree = "1";
                    SAA = this.RB_Authorized_Activity.SelectedItem.Value.Substring(2);

                    sRecordId = GetRecordId(iCurrentIndex);
                    bSave = ru.UpdateRoster(sRecordId, sContactId, SYearTrain, SEducation, STheoretical, SPractical, SAssesments, SCountry, SPerformed, SAgree, SAA, BStatus);

                    if (bSave == true)
                    {//after saving need to populate screen with new record
                        if (IsFirstRecordIndex(iCurrentIndex) == true) //Testing if already reaching the last record
                        {
                            Response.Redirect("Roster.aspx", false);
                            return;
                        }
                        else
                        {

                            iCurrentIndex = iCurrentIndex - 1; //set index lower
                            ViewState.Add("vCurrentIndex", iCurrentIndex); //save the index
                            al = ru.Create_Roster_ArrayList(sContactId); //create new index table
                            ViewState.Add("vRosterList", al); //save the index table

                            sRecordId = GetRecordId(iCurrentIndex); //get the record id
                            ViewState.Add("vRosterId", sRecordId); //save the record id

                            //populate the form
                            ru.Create_Roster_List_Renew(sContactId, this.PRoster); //create the roster list
                            ru.PopAuthorizedActivity("Update", sContactId, sRecordId, this.RB_Authorized_Activity);
                            ru.PopCountry(this.DDL_Country);
                            ru.PopYearTrainComplete(this.DDL_Year_Train_Complete);
                            ResetFieldColor();
                            PopFieldsFromDb(sRecordId);
                            return;
                        }
                    }
                    else
                    {
                        Response.Redirect("Roster.aspx", false);
                        return;
                    }
                }
                else
                {
                    BStatus = false;
                }

                bool bTest = TestMandatoryFields();

                if (bTest == false)
                {
                    OpenPopUpBox("PopupBox1");
                    
                   
                    return;
                }

               


                SYearTrain = this.DDL_Year_Train_Complete.SelectedItem.Text;
                SEducation = this.Txt_Education.Text;
                STheoretical = this.Txt_Theoretical_Edu.Text;
                SPractical = this.Txt_Practical_Edu.Text;
                SAssesments = this.Txt_Assessments.Text;
                SCountry = this.DDL_Country.SelectedItem.Text;
                SPerformed = Convert.ToInt16(this.CB_Performed.Checked).ToString();
                SAgree = Convert.ToInt16(this.CB_Agree.Checked).ToString();
                SAA = this.RB_Authorized_Activity.SelectedItem.Value.Substring(2);

                
           

                if ((bool)ViewState["vAddRenew"] == true) //testing whether this is for adding new record during renewal process
                {
                   
                    if (IsFirstRecordIndex(iCurrentIndex) == false)
                    {
                        if (bTest == true)
                        {
                            bSave = ru.AddNewRoster(sContactId, SYearTrain, SEducation, STheoretical, SPractical, SAssesments, SCountry, SPerformed, SAgree, SAA);

                            if (bSave == true)
                            {
                                 ViewState.Add("vAddRenew", false);
                                  //ViewState.Add("vCurrentIndex", iCurrentIndex + 1);

                                  //iCurrentIndex = (int)ViewState["vCurrentIndex"];
                                  ViewState.Add("vCurrentIndex", iCurrentIndex - 1);
                                  sRecordId = GetRecordId(iCurrentIndex - 1);
                                  ViewState.Add("vRosterId", sRecordId);
                                 
                                ru.Create_Roster_List_Renew(sContactId,this.PRoster);
                                
                                ru.PopAuthorizedActivity("Update", sContactId, sRecordId, this.RB_Authorized_Activity);
                                ru.PopCountry(this.DDL_Country);
                                ru.PopYearTrainComplete(this.DDL_Year_Train_Complete);

                                
                                ResetFieldColor();
                                PopFieldsFromDb(sRecordId);
                            }
                        }
                        else
                        {

                            OpenPopUpBox("PopupBox1");
                            
                        }

                    }
                    else
                    {
                        //If not first record

                        if (bTest == true) //If mandatory fields already populated
                        {
                            bSave = ru.AddNewRoster(sContactId, SYearTrain, SEducation, STheoretical, SPractical, SAssesments, SCountry, SPerformed, SAgree, SAA);
                            if (bSave == true)
                            {
                                
                                                                                              
                                ViewState.Add("vCurrentIndex", 0);
                                ViewState.Add("vRosterId", "");
                                ViewState.Add("vRecordId", "");
                                Response.Redirect("Roster.aspx", false);

                                
                               
                            }
                        }
                        else
                        {
                            ViewState.Add("vAddRenew", false);
                            ViewState.Add("vCurrentIndex", 0);
                            ViewState.Add("vRecordId", "");
                            OpenPopUpBox("PopupBox1");
                            
                        }
                    }
                }
                else
                { //if this is not add new record during renewal

                    if (IsFirstRecordIndex(iCurrentIndex) == false)
                    {
                        
                        if (bTest == true)
                        {
                            sRecordId = GetRecordId(iCurrentIndex);
                            bSave = ru.UpdateRoster(sRecordId, sContactId, SYearTrain, SEducation, STheoretical, SPractical, SAssesments, SCountry, SPerformed, SAgree, SAA, BStatus);

                            if (bSave == true)
                            {
                                if (CB_Remove.Checked == true)
                                {
                                    al = ru.Create_Roster_ArrayList(sContactId);
                                    ViewState.Add("vRosterList", al);
                                    iCurrentIndex = iCurrentIndex - 1;
                                }
                                else
                                {
                                    iCurrentIndex = iCurrentIndex - 1;
                                }
                                                                
                                ViewState.Add("vCurrentIndex", iCurrentIndex);
                                sRecordId = GetRecordId(iCurrentIndex);
                                ViewState.Add("vRosterId", sRecordId);
                               
                                ru.Create_Roster_List_Renew(sContactId, this.PRoster);
                                ru.PopAuthorizedActivity("Update", sContactId, sRecordId, this.RB_Authorized_Activity);
                                ru.PopCountry(this.DDL_Country);
                                ru.PopYearTrainComplete(this.DDL_Year_Train_Complete);

                                
                                ResetFieldColor();
                                PopFieldsFromDb(sRecordId);
                            }
                        }
                        else
                        {

                            OpenPopUpBox("PopupBox1");
                       }

                    }
                    else
                    {
                        //If record is the first of record

                        if (bTest == true) //If mandatory fields already populated
                        {
                            sRecordId = GetRecordId(iCurrentIndex);
                            bSave = ru.UpdateRoster(sRecordId, sContactId, SYearTrain, SEducation, STheoretical, SPractical, SAssesments, SCountry, SPerformed, SAgree, SAA, BStatus);
                            if (bSave == true)
                            {
                                ViewState.Add("vCurrentIndex", 0);
                                ViewState.Add("vRecordId", "");
                                Response.Redirect("Roster.aspx",false);
                            }
                        }
                        else
                        {

                            OpenPopUpBox("PopupBox1");
                            
                        }
                    }
                }

                
            }

            catch (Exception exc)
            {
                string msg;
                msg = exc.Message;
                writeEventToLog(" Error in On Previous Step ! -- " + msg);
            }
        }

        
        private void SetModalPopup1()
        {
            try
            {
                string sMsg = "Mandatory fields are not completed. Do you want to cancel this application and lose the data you have provided?";
                this.LblModal1.Text = sMsg;
                              
                
            }

            catch (Exception exc)
            {
                string msg;
                msg = exc.Message;
                writeEventToLog(" Error to set ModalPopup ! -- " + msg);
                
            }
        }

        private void SetModalPopup2()
        {
            try
            {
                string sRecordMsg = "Would you like to add yourself to another roster?";
                this.LblModal2.Text = sRecordMsg;
                              
            }

            catch (Exception exc)
            {
                string msg;
                msg = exc.Message;
                writeEventToLog(" Error to set ModalPopup ! -- " + msg);

            }
        }

        private void SetModalPopup3()
        {
            try
            {
                string sMsg = "Do you want to cancel this application and lose the data you have provided?";
                this.LblModal3.Text = sMsg;
                                              
            }

            catch (Exception exc)
            {
                string msg;
                msg = exc.Message;
                writeEventToLog(" Error to set ModalPopup ! -- " + msg);

            }
        }

            protected void btnModal1Yes_Click(object sender, EventArgs e)
            {try
            {
                ClosePopUpBox("PopupBox1");
                ViewState.Add("vCurrentIndex", 0);
                ViewState.Add("vRecordId", "");
                Response.Redirect("Roster.aspx", false); //renewal roster
                
                
               
            }

            catch (Exception exc)
            {
                string msg;
                msg = exc.Message;
                writeEventToLog(" Error to run button Modal Yes ! -- " + msg);
                
            }
          
          }

            protected void btnModal1No_Click(object sender, EventArgs e)
            {
                try
                {
                    ClosePopUpBox("PopupBox1");


                }

                catch (Exception exc)
                {
                    string msg;
                    msg = exc.Message;
                    writeEventToLog(" Error to run button Modal No ! -- " + msg);

                }

            }

        protected void btnModal2Yes_Click(object sender, EventArgs e)
        {
            try
            {
                ClosePopUpBox("PopupBox2");
                int iCurrentIndex = (int) ViewState["vCurrentIndex"];
                string sRecordId = (string)ViewState["vRecordId"];
                Response.Redirect("RosterNew.aspx?p2=1",false);

              }

            catch (Exception exc)
            {
                string msg;
                msg = exc.Message;
                writeEventToLog(" Error to run button Modal Yes ! -- " + msg);
                
            }

        }

        protected void btnModal2No_Click(object sender, EventArgs e)
        {
            try
            {
                ClosePopUpBox("PopupBox2");
                ViewState.Add("vCurrentIndex", 0);
                ViewState.Add("vRecordId", "");
                Response.Redirect("SpecialMainRnw.aspx", false);
               
            }

            catch (Exception exc)
            {
                string msg;
                msg = exc.Message;
                writeEventToLog(" Error to run button Modal No ! -- " + msg);
               
            }

        }

        protected void btnModal3Yes_Click(object sender, EventArgs e)
        {
            try
            {
                ClosePopUpBox("PopupBox3");
                Response.Redirect("Roster.aspx?p=1", false);

            }

            catch (Exception exc)
            {
                string msg;
                msg = exc.Message;
                writeEventToLog(" Error to run button Modal3 Yes ! -- " + msg);

            }
        }

        protected void btnModal3No_Click(object sender, EventArgs e)
        {
            try
            {

                ClosePopUpBox("PopupBox3");


            }

            catch (Exception exc)
            {
                string msg;
                msg = exc.Message;
                writeEventToLog(" Error to run button Modal3 No ! -- " + msg);

            }
        }

        
        //Purpose: to write error message to log table
        //Programmer: Andreas Tedjasukmana
        //Date: December, 2011
        private void writeEventToLog(string sMsg)
        {
            string sContactId = string.Empty;

            if (Request.Cookies["hpContactId"] != null)
            {
                HttpCookie hc = Request.Cookies["hpContactId"];
                sContactId = Server.HtmlEncode(hc.Value);
            }

            sMsg = sMsg + ", Contact_Id: " + sContactId;

            Message msg = new Message(MessageLevel.Error, sMsg);
            StreamLogger.LogMessage(msg);
        }

        private void OpenPopUpBox(string sPopUpBoxName)
        {
            try
            {
                StringBuilder sb = new StringBuilder();
                sb.Append("load");
                sb.Append(sPopUpBoxName);
                sb.Append("();");

                StringBuilder sbn = new StringBuilder();
                sbn.Append(sPopUpBoxName);
                sbn.Append("L");

                if (!Page.ClientScript.IsClientScriptBlockRegistered(Page.GetType(), sPopUpBoxName))
                {
                    ClientScript.RegisterStartupScript(Page.GetType(), sbn.ToString(), sb.ToString(), true);
                }

            }

            catch (Exception exc)
            {
                string msg;
                msg = exc.Message;
                writeEventToLog(" Error to run Modal Confirm2 ! -- " + msg);

            }
        }

        private void ClosePopUpBox(string sPopUpBoxName)
        {
            try
            {
                StringBuilder sb = new StringBuilder();
                sb.Append("unload");
                sb.Append(sPopUpBoxName);
                sb.Append("();");

                StringBuilder sbn = new StringBuilder();
                sbn.Append(sPopUpBoxName);
                sbn.Append("U");

                if (!Page.ClientScript.IsClientScriptBlockRegistered(Page.GetType(), sPopUpBoxName))
                {
                    ClientScript.RegisterStartupScript(Page.GetType(), sbn.ToString(), sb.ToString(), true);
                }

            }

            catch (Exception exc)
            {
                string msg;
                msg = exc.Message;
                writeEventToLog(" Error to run Modal Confirm2 ! -- " + msg);

            }
        }

        //Replace webmsg with client side javascript alert
        //Programmer: Andreas
        //03/07/2014
        private void JavaAlertBox(string sMsg)
        {
            try
            {
                StringBuilder script = new StringBuilder();

                script.Append("<SCRIPT LANGUAGE='JavaScript'>");
                script.Append("alert('" + sMsg + "');");
                script.Append("</SCRIPT>");

                ClientScript.RegisterStartupScript(this.GetType(), "AlertScript", script.ToString());
            }

            catch (Exception exc)
            {
                string msg;
                msg = exc.Message;

            }
        }

    }
}
